This Section Will describe provedure to implement Email Report(to Send Automatically When Failure/Success Happend).

Procedure:
    Required Jars:
    1. Copy Following jars under path: C:\Program Files (x86)\SmartBear\SoapUI-5.3.0\bin\ext
        •	activation-1.1.1.jar
        •	java-mail-1.4.4.jar

    2. Restart SOAPUI to Pick The jars

    3. Create SOAPUI Project :Email Test
          Create SOAPUI TestSuite:Email Test Suite
            Create SOAPUI TestTestCase:Email Test Case  
                Create a Properties Step: MailHostProperties
                    Create Following Properties in that:
                        mailHost=<smtp.gmail.com>
                        userName=<userName>
                        password=KY6aYWMHTd%25sSC
                        fromEmail=<senderEmailId@domain.com>
                        toEmailList=<receipientEmailId1@domain.com,receipientEmailId2@domain.com,receipientEmailId3@domain.com>
                        isTestStatusEmailReportEnabled=true

              Create a Groovy Step: SendTestReportEmail:
              
                  import javax.activation.DataHandler;
                  import javax.activation.DataSource;
                  import javax.activation.FileDataSource;
                  import javax.mail.BodyPart;
                  import javax.mail.Message;
                  import javax.mail.MessagingException;
                  import javax.mail.Multipart;
                  import javax.mail.PasswordAuthentication;
                  import javax.mail.Session;
                  import javax.mail.Transport;
                  import javax.mail.internet.InternetAddress;
                  import javax.mail.internet.MimeBodyPart;
                  import javax.mail.internet.MimeMessage;
                  import javax.mail.internet.MimeMultipart;

                  MAILHOST=context.expand( '${MailHostProperties#mailHost}' ).toString();//Global Variable
                  USERNAME=context.expand( '${MailHostProperties#userName}' ).toString();//Global Variable
                  PASSWORD=context.expand( '${MailHostProperties#password}' ).toString(); //Global Variable
                  FROMEMAIL=context.expand( '${MailHostProperties#fromEmail}' ).toString();//Global Variable
                  TOEMAIL=context.expand( '${MailHostProperties#toEmailList}' ).toString();//Global Variable
                  
                  boolean isTestStatusEmailReportEnabled=context.expand( '${MailHostProperties#isTestStatusEmailReportEnabled}' ).toBoolean();
                  String testResult=testRunner.testCase.getPropertyValue("testResult").toString(); //Get Pass/Fail Status from Properties
                  String emailSubject;
                  String emailBody;
                  String emailAttachmentPath;
                  String emailAttachmentFileName; 
                  
                  if(isTestStatusEmailReportEnabled){
                        testResultsFile="testResults.log";
                        testResultsFilePath= testResultsgFolderPath+"//"+tmoLevelLogResultsFile;

                        emailSubject="Test Report: TEST STATUS: $carrierTestResult"; //Construct Accordingly Whatever  you need
                        emailBody="""                                                //Construct Accordingly Whatever  you need
                        Test Item -1: 	$<Value>
                        Test Item-2 :  	$<Value>
                        Detailed Log Report[Attached]:\t\t$testResultsFile 
                        """;
                        emailAttachmentPath=tmoLevelLogResultsFilePath;
                        emailAttachmentFileName=testResultsFile;
                        sendEmailReport(emailSubject,emailBody,emailAttachmentPath,emailAttachmentFileName);
                  }

                //Reusable Groovy Function to Send Mails
                def sendEmailReport(def emailSubject,def emailBody,def emailAttachmentPath,def emailAttachmentFileName){
                      this.emailSubject=emailSubject;
                      this.emailBody=emailBody;
                      this.emailAttachmentPath=emailAttachmentPath;
                      this.emailAttachmentFileName=emailAttachmentFileName;

                      boolean isEmailSentOperationSuccessful=false;
                      Properties props = new Properties();
                      props.put("mail.smtp.auth", "true");
                      props.put("mail.smtp.starttls.enable", "true");
                      props.put("mail.smtp.host", MAILHOST);
                      props.put("mail.smtp.port", "587");

                      def emailUserName=USERNAME;
                      def emailPassword=PASSWORD;
                      Session session = Session.getInstance(props,new javax.mail.Authenticator() {	// Get the Session object.
                        protected PasswordAuthentication getPasswordAuthentication() {
                           return new PasswordAuthentication(emailUserName, emailPassword);
                           }
                      });

                      try {
                              Message message = new MimeMessage(session);
                              message.setFrom(new InternetAddress(FROMEMAIL));
                              message.setRecipients(Message.RecipientType.TO,InternetAddress.parse(TOEMAIL));
                              message.setSubject(emailSubject);
                              BodyPart messageBodyPart = new MimeBodyPart();
                              messageBodyPart.setText(emailBody);
                              Multipart multipart = new MimeMultipart();
                              multipart.addBodyPart(messageBodyPart);
                              messageBodyPart = new MimeBodyPart();
                              DataSource source = new FileDataSource(emailAttachmentPath);
                              messageBodyPart.setDataHandler(new DataHandler(source));
                              messageBodyPart.setFileName(emailAttachmentFileName);
                              multipart.addBodyPart(messageBodyPart);
                              message.setContent(multipart);
                              Transport.send(message);
                              log.info ("Sent message successfully....");
                              isEmailSentOperationSuccessful=true;
                            } catch (MessagingException e) {
                                throw new RuntimeException(e);
                                isEmailSentOperationSuccessful=false;
                            }
                      return isEmailSentOperationSuccessful;
                }

                  
